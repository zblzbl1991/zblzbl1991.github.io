<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zblzbl1991.github.io</id>
    <title>Gridea</title>
    <updated>2021-09-03T07:40:32.411Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zblzbl1991.github.io"/>
    <link rel="self" href="https://zblzbl1991.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://zblzbl1991.github.io/images/avatar.png</logo>
    <icon>https://zblzbl1991.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[docker-compose的使用]]></title>
        <id>https://zblzbl1991.github.io/post/docker-compose-de-shi-yong/</id>
        <link href="https://zblzbl1991.github.io/post/docker-compose-de-shi-yong/">
        </link>
        <updated>2021-08-27T07:34:35.000Z</updated>
        <content type="html"><![CDATA[<p>最开始想先了解一下docker-machine,但是发现用处并不大,所以先学习一下docker-compose,记录一下学习的经历:</p>
<ol>
<li>安装docker-compose</li>
</ol>
<p>按照官网上的流程走:<br>
官网下载最新的安装包</p>
<pre><code class="language-shell">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose
</code></pre>
<p>接着提升权限</p>
<pre><code class="language-shell">sudo chmod +x /usr/local/bin/docker-compose
</code></pre>
<p>将路径指向/usr/bin</p>
<pre><code class="language-shell">sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
</code></pre>
<p>搞定之后就测试一下</p>
<pre><code class="language-shell">[hnmsg@iZm5ejfv28yygbtfl4txm2Z ~]$ docker-compose version
docker-compose version 1.29.2, build 5becea4c
docker-py version: 5.0.0
CPython version: 3.7.10
OpenSSL version: OpenSSL 1.1.0l  10 Sep 2019
</code></pre>
<ol start="2">
<li>学习模板文件,跟着官网的来就行,使用起来感觉还是比较简单的</li>
</ol>
<pre><code>https://docs.docker.com/compose/gettingstarted/
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[软考系统架构设计师]]></title>
        <id>https://zblzbl1991.github.io/post/ruan-kao-xi-tong-jia-gou-she-ji-shi/</id>
        <link href="https://zblzbl1991.github.io/post/ruan-kao-xi-tong-jia-gou-she-ji-shi/">
        </link>
        <updated>2021-08-26T05:14:31.000Z</updated>
        <content type="html"><![CDATA[<h2 id="操作系统">操作系统</h2>
<h4 id="嵌入式调度算法">嵌入式调度算法</h4>
<p>分为如下几种:</p>
<ul>
<li>最晚截止期调度算法: 指程序按照每个任务的最接近截止期末端的时间进行调度.</li>
</ul>
<h2 id="数据库系统">数据库系统</h2>
<p>数据库系统划分为三级:</p>
<ol>
<li>物理级</li>
<li>概念级</li>
<li>用户级</li>
</ol>
<p>关系模型分解需要遵循两个准则:</p>
<ol>
<li>
<p>无损连接性：信息不失真（不增减信息）。</p>
</li>
<li>
<p>函数依赖保持性：信息不失真（不增减信息）。</p>
</li>
</ol>
<h3 id="数据库三范式">数据库三范式</h3>
<ul>
<li>第一范式:<br>
如果关系 R 中所有属性的值域都是简单域，其元素（即属<br>
性）不可再分，是属性项而不是属性组,那么关系模型 R 是第一范式的，记作 RÎ1NF</li>
<li>第二范式:<br>
如果一个关系 R 属于 1NF，且所有的非主属性都完全依赖于主属性，则称之为第二范<br>
式，记作 RÎ2NF。</li>
<li>第三范式<br>
如果一个关系 R 属于 2NF，且每个非主属性不传递依赖于主属性，这种关系是 3NF，<br>
记作 RÎ3NF。</li>
</ul>
<p>BC范式(非重要点):如果关系模型 R∈1NF，且 R 中每一个函数依赖关系中的决定因素都<br>
包含码，则 R 是满足 BC 范式的关系，记作 RÎBCNF。</p>
<p><strong>分布式数据库</strong><br>
全局概念模式: 是分布式数据库的整体抽象,描述分布式数据库全局的逻辑结构.</p>
<h2 id="设计模式">设计模式</h2>
<p>Bridge(桥接模式): 特点是实现接口与实现的分离</p>
<h2 id="构件与中间件技术">构件与中间件技术</h2>
<p><strong>实体构件:</strong> 需要长期持久化,主要用于事务性,由容器管理其持久化<br>
<strong>加工构件:</strong> 需要长期持久化,但没有客户端可访问的主键<br>
**会话构件:**不需要长期持久化,状态信息由构件自己管理,服务构件是无状态的</p>
<ul>
<li>面向构件编程:</li>
</ul>
<ul>
<li>多态性(可替代性)</li>
<li>模块封装性(高层次信息的隐藏)</li>
<li>后期的绑定和装载(部署独立性)</li>
<li>安全性(类型和模块安全性)</li>
</ul>
<p><strong>CORBA构件模型:</strong><br>
POA:是对象实现与ORB其他组件之间的中介,它将客户的请求传送到伺服对象,按需创建子POA,提供管理伺服对象的策略.<br>
伺服对象:是指具体程序设计语言的对象或实体,通常存在于一个服务程序进程之中.</p>
<h4 id="idl-一种接口定义语言">IDL :一种接口定义语言</h4>
<p><strong>接口描述</strong>是IDL文件中最核心的部分<br>
<strong>模块定义</strong>进行数据类型和实现语言的映射</p>
<h4 id="软件重用">软件重用</h4>
<p>**水平式重用:**是指通用领域的重用,比如标准函数库.</p>
<h4 id="系统构件组装">系统构件组装</h4>
<p>分为三个层次:</p>
<ul>
<li>定制</li>
<li>集成</li>
<li>扩展</li>
</ul>
<h3 id="开发模型">开发模型</h3>
<p>基于构件的开发模型由以下组成</p>
<ul>
<li>软件的需求分析定义,</li>
<li>体系结构设计,</li>
<li>构件库建立,</li>
<li>应用软件构建,</li>
<li>测试<br>
5个部分组成</li>
</ul>
<p><strong>逻辑构件模型</strong></p>
<ul>
<li>用功能包描述系统的抽象设计</li>
<li>用接口描述每个服务集合,以及功能之间如何交互以满足用户需求<br>
<em>它作为系统的设计蓝图以保证系统提供适当的功能</em></li>
</ul>
<p><strong>物理构件模型</strong></p>
<ul>
<li>用技术设施产品</li>
<li>硬件分布</li>
<li>拓扑结构</li>
<li>用于绑定的网络和通信协议描述系统的物理设计<br>
<em>用于了解系统的性能,吞吐率等许多非功能性的属性</em></li>
</ul>
<p><strong>RUP</strong><br>
RUP也称为UP,统一过程,核心特点:</p>
<ul>
<li>以架构为中心</li>
<li>用例驱动</li>
<li>迭代和增量
<ol>
<li>降低了在一个增量上的开支风险</li>
<li>降低了产品无法按照既定进度进入市场的风险</li>
<li>加快了整个开发的进度</li>
<li>迭代过程这种模式使适应需求的变化会更容易<br>
开发模型分为4个阶段:</li>
</ol>
</li>
<li>初始,为系统建立业务模型并确定项目的边界.在初始阶段,必须识别所有与系统交互的外部实体,定义系统与外部实体交互的特性.</li>
<li>细化,确定系统的体系结构,分析问题领域,建立完善的架构,淘汰项目中最高风险的元素.</li>
<li>构建/构造,要开发所有剩余的构件和应用程序功能,把这些构建集成为产品,并进行详细测试.</li>
<li>移交</li>
</ul>
<p><strong>原型开发</strong><br>
分为两大类:</p>
<ul>
<li>快速原型法
<ul>
<li>快速开发出一个原型,利用该原型获取用户需求,然后将该原型抛弃</li>
</ul>
</li>
<li>演化式原型法
<ul>
<li>将原型逐步进化成最终的目标系统</li>
</ul>
</li>
</ul>
<p><strong>螺旋模型</strong><br>
这种模型将整个软件开发流程分为多个阶段,每个阶段都由4部分组成</p>
<ol>
<li>目标设定</li>
<li>风险分析</li>
<li>开发和有效性验证</li>
<li>评审</li>
</ol>
<p><strong>快速应用开发(RAD)</strong><br>
通过使用基于构件的开发方式获得快速开发,但是有以下局限性<br>
- 对模块化要求比较高<br>
- 开发者和客户必须在很短的时间完成一系列的需求分析<br>
- 只能用于管理信息系统的开发,不适合技术风险很高的情况</p>
<p><strong>软件过程模型</strong><br>
基本概念:软件过程是制作软件产品的一组活动以及结果,软件活动主要有:<br>
1. 软件描述,必须定义软件功能以及使用的限制<br>
2. 软件开发,软件的设计和实现,软件工程人员制作出能满足描述的软件.<br>
3. 软件有效性验证,软件必须经过严格的验证,以保证能够满足客户的需求.<br>
4. 软件进化,软件随着客户的需求不断改进.</p>
<h3 id="软件测试">软件测试</h3>
<p><strong>系统测试</strong><br>
系统测试是根据系统方案说明书来设计测试用例,常见的系统测试有:</p>
<ul>
<li>恢复测试,检测系统的容错能力</li>
<li>安全性测试,检测系统的安全机制和保护措施是否完善,主要为了验证系统的防护能力</li>
<li>强度测试,是对系统在异常情况下的承受能力测试,是检查系统在极限状态下运行时,性能下降的幅度是否在允许范围内.</li>
<li>压力测试</li>
<li>性能测试,检查系统是否满足设计方案说明书对系统的性能要求</li>
<li>可靠性测试</li>
<li>可用性测试</li>
<li>可维护性测试</li>
<li>安装测试</li>
</ul>
<p><strong>静态分析</strong><br>
静态分析通过程序文本从而识别出程序语句的各个部分,审查可能的缺陷和异常之处,可分为5个阶段:<br>
1. 控制流分析阶段,找出并突出显示那些带有多重出口或入口的循环以及不可达到的代码段.<br>
2. 数据使用分析阶段,突出程序中变量的使用情况.<br>
3. 接口分析阶段,检查子程序和过程说明以及他们使用的一致性.<br>
4. 信息流分析阶段,找出输入变量和输出变量之间的依赖关系.<br>
5. 路径分析阶段,找出程序中所有可能的路径并画出此路径中执行的语句.</p>
<h3 id="需求工程">需求工程</h3>
<p><strong>需求跟踪</strong></p>
<p>用户需求---&gt;软件需求---&gt;下一级工作产品</p>
<h3 id="系统配置与性能评价">系统配置与性能评价</h3>
<p>应用程序中应用最多,最频繁的那部分核心程序作为评估计算机的标准程序,称为基准测试程序</p>
<h3 id="企业信息化战略与实施">企业信息化战略与实施</h3>
<h4 id="关键成功因素法">关键成功因素法:</h4>
<p>通过对关键因素的识别,确定系统开发的优先次序.<br>
通过组织的目标分别和识别关键成功因素识别、性能指标识别,一直到数据字典</p>
<p>系统应用集成(EAI):<br>
基本原则:集成多个系统并保证系统互不干扰,也就是独立性.<br>
EAI提供4层服务,从下至上:</p>
<ul>
<li>通信服务</li>
<li>信息传递与转化服务</li>
<li>应用连接服务</li>
<li>流程控制服务</li>
</ul>
<h3 id="软件工程">软件工程</h3>
<h4 id="需求变更">需求变更</h4>
<p>流程:</p>
<ol>
<li>问题分析和变更描述</li>
<li>变更分析和成本计算</li>
<li>变更实现</li>
</ol>
<h4 id="逆向工程">逆向工程</h4>
<ul>
<li>重组:指在同一抽象级别上转换系统描述形式</li>
<li>重构:在逆向工程所获信息的基础上修改或重构已有的系统,产生系统新的一个版本</li>
</ul>
<h4 id="软件设计">软件设计</h4>
<h5 id="软件架构设计">软件架构设计</h5>
<p><strong>软件架构风格</strong><br>
数据流风格:</p>
<ul>
<li>批处理</li>
<li>管道-过滤器<br>
调用/返回风格:</li>
<li>主程序/子程序</li>
<li>面向对象</li>
<li>层次结构</li>
</ul>
<p>独立构件风格:<br>
- 进程通信<br>
- 事件驱动系统</p>
<p>虚拟机风格:</p>
<ul>
<li>解释器</li>
<li>基于规则的系统</li>
</ul>
<p>仓库风格:</p>
<ul>
<li>数据库系统</li>
<li>超文本系统</li>
<li>黑板系统</li>
</ul>
<h4 id="soa">SOA</h4>
<p>企业服务总线,ESB:其思想是提供一种标准的软件底层架构,ESC不支持请求者与服务者直接连接,但任然存在关系,只是这种关系是松耦合的</p>
<h4 id="基于体系结构的开发模型absdm">基于体系结构的开发模型ABSDM</h4>
<p>ABSDM把软件过程划分为:</p>
<ol>
<li>体系结构需求</li>
<li>设计</li>
<li>文档化</li>
<li>复审</li>
<li>实现</li>
<li>演化</li>
</ol>
<p><strong>结构化设计</strong></p>
<ol>
<li>
<p>概要设计:</p>
<ul>
<li>将软件需求转换为数据结构和软件系统结构</li>
</ul>
</li>
<li>
<p>详细设计</p>
<ul>
<li>过程设计,通过对结构细化,得到软件详细数据结构和算法</li>
</ul>
</li>
</ol>
<p><strong>结构化程序设计的三种基本结构</strong></p>
<ul>
<li>顺序</li>
<li>分支</li>
<li>循环</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[解决ConditionOnBean(DataSource.class)的加载顺序的问题]]></title>
        <id>https://zblzbl1991.github.io/post/jie-jue-conditiononbeandatasourceclassde-jia-zai-shun-xu-de-wen-ti/</id>
        <link href="https://zblzbl1991.github.io/post/jie-jue-conditiononbeandatasourceclassde-jia-zai-shun-xu-de-wen-ti/">
        </link>
        <updated>2021-08-25T03:32:12.000Z</updated>
        <content type="html"><![CDATA[<p>前两天碰到个问题,本来是打算利用SpringBoot的@ConditionOnBean来处理当配置了数据源使用ABean,没有就是用BBean,可是我在配置表中的ConditionOnBean(DataSource.class)的时候,提示我bean not found javax.sql.DataSource ,网上找了蛮久,都是只说了Bean加载顺序,但是没有说如何解决的.</p>
<p>今天看到一个解决方法,利用SpringBoot的Bean延期加载器  <code>DeferredImportSelector</code></p>
<p>具体解决代码:</p>
<pre><code class="language-java">/** @author zhaobaolong
 * @date 2021/8/25 9:00
 * @description condition延期选择器实现
 */
public class ConditionDeferredImportSelector implements DeferredImportSelector {
    @Override
    public String[] selectImports(AnnotationMetadata annotationMetadata) {
        return new String[]{LogConfig.class.getName()};
    }
}
</code></pre>
<pre><code class="language-java"> /** @author zhaobaolong
 * @date 2021/8/23 15:50
 * @description 提供一个初始化配置的类
 */
@Slf4j
public class LogConfig {
    private static final String APP_NAME =&quot;defaultLog&quot;;
    @Autowired
    private RedisTemplate&lt;String,Object&gt; redisTemplate;

    @Bean
    @ConditionalOnMissingBean(value = {JdbcTemplate.class})
    public JdbcTemplate jdbcTemplate(DataSource dataSource){
        log.info(&quot;加载默认jdbcTemplate&quot;);
        return new JdbcTemplate(dataSource);
    }
    @Bean
    @ConditionalOnMissingBean(ILogProducer.class)
    public ILogProducer producer(){
        log.info(&quot;加载默认Producer&quot;);
        RedisUtil redisUtil = new RedisUtil(redisTemplate, APP_NAME);
        return new DefaultLogProducerImpl(redisUtil);
    }
    @Bean
    @ConditionalOnMissingBean(ILogConsumer.class)
    public ILogConsumer consumer(ILogStorage storage){
        log.info(&quot;加载默认Consumer&quot;);
        RedisUtil redisUtil = new RedisUtil(redisTemplate, APP_NAME);
        return new DefaultLogConsumerImpl(redisUtil,storage);
    }

    @Bean
    @ConditionalOnBean(value = {DataSource.class})
    @ConditionalOnMissingBean(ILogStorage.class)
    public ILogStorage jdbcStorage(  ){
        log.info(&quot;加载jdbc storage&quot;);
        return new JDBCStorageHandler();
    }
    @Bean
    @ConditionalOnMissingBean(value = {ILogStorage.class})
    public ILogStorage storage(){
        log.info(&quot;加载默认输出控制台storage&quot;);
        return new DefaultLogStorageImpl();
    }



}
</code></pre>
<pre><code class="language-java"> /** 开启日志
 *
 * @Author: wubin
 * @DATE: 2021/3/11 0011 下午 15:44
 */
@Target({ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Inherited
@Documented
@Import({LogRecordAspect.class, ConditionDeferredImportSelector.class, SecurityUtil.class})
public @interface EnableLog {
}
</code></pre>
<p>这样配置,在初始化的时候就会先加载默认Bean执行顺序,执行完之后,再加载延期后的Bean</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于解决ApplicationListener重复执行]]></title>
        <id>https://zblzbl1991.github.io/post/guan-yu-jie-jue-applicationlistener-chong-fu-zhi-xing/</id>
        <link href="https://zblzbl1991.github.io/post/guan-yu-jie-jue-applicationlistener-chong-fu-zhi-xing/">
        </link>
        <updated>2021-08-25T03:28:05.000Z</updated>
        <content type="html"><![CDATA[<p>类实现ApplicationListener之后,再实现ApplicationContextAware</p>
<p>我是参考Dubbo的方法,它的实现方式是:</p>
<pre><code class="language-java">public abstract class OnceApplicationContextEventListener implements ApplicationListener, ApplicationContextAware {
    protected final Log log = LogFactory.getLog(this.getClass());
    private ApplicationContext applicationContext;

    public OnceApplicationContextEventListener() {
    }

    public OnceApplicationContextEventListener(ApplicationContext applicationContext) {
        this.setApplicationContext(applicationContext);
    }

    public final void onApplicationEvent(ApplicationEvent event) {
        if (this.isOriginalEventSource(event) &amp;&amp; event instanceof ApplicationContextEvent) {
            this.onApplicationContextEvent((ApplicationContextEvent)event);
        }

    }

    protected abstract void onApplicationContextEvent(ApplicationContextEvent var1);

    private boolean isOriginalEventSource(ApplicationEvent event) {
        boolean originalEventSource = ObjectUtils.nullSafeEquals(this.getApplicationContext(), event.getSource());
        if (!originalEventSource &amp;&amp; this.log.isDebugEnabled()) {
            this.log.debug(&quot;The source of event[&quot; + event.getSource() + &quot;] is not original!&quot;);
        }

        return originalEventSource;
    }

    public final void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
        this.applicationContext = applicationContext;
    }

    public ApplicationContext getApplicationContext() {
        //判断上下文是否初始化,只有未初始化前才执行,这样可以防止重复执行 onApplicationEvent
        if (this.applicationContext == null) {
            throw new NullPointerException(&quot;applicationContext must be not null, it has to invoke setApplicationContext(ApplicationContext) method first if &quot; + ClassUtils.getShortName(this.getClass()) + &quot; instance is not a Spring Bean&quot;);
        } else {
            return this.applicationContext;
        }
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[docker安装skywalking]]></title>
        <id>https://zblzbl1991.github.io/post/docker-an-zhuang-skywalking/</id>
        <link href="https://zblzbl1991.github.io/post/docker-an-zhuang-skywalking/">
        </link>
        <updated>2021-08-25T03:27:02.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>
<h3 id="安装elasticsearch">安装elasticsearch</h3>
</li>
</ol>
<pre><code>docker run -d --name=es7 -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; elasticsearch:7.5.1
</code></pre>
<p>​	然后将数据复制出来建立一个目录</p>
<pre><code class="language-docker">docker cp es7:/usr/share/elasticsearch/logs /data/elasticsearch/
docker rm -f es7
mkdir -p /data/elasticsearch
</code></pre>
<p>执行完之后再次启动</p>
<pre><code class="language-shell">docker run -d --name=es7 --restart=always -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; -e ES_JAVA_OPTS=&quot;-Xms512m -Xmx512m&quot; -v /data/elasticsearch/data:/usr/share/elasticsearch/data  -v /data/elasticsearch/logs:/usr/share/elasticsearch/logs  elasticsearch:7.5.1
</code></pre>
<p>这里可能会报错权限不足,那么这个时候需要对上个操作建立的目录进行授权操作</p>
<pre><code class="language-shell">sudo chmod 777 -R /data/elasticsearch
</code></pre>
<p>然后再次启动es</p>
<ol start="2">
<li>
<h3 id="安装skywalking">安装skywalking</h3>
</li>
</ol>
<pre><code class="language-shell">docker run --name skywalking-oap-server --restart always -d --restart=always  -e TZ=Asia/Shanghai  -p 12800:12800  -p 11800:11800 --link es7:es7 -e SW_STORAGE=elasticsearch -e SW_STORAGE_ES_CLUSTER_NODES=es7:9200 apache/skywalking-oap-server:6.6.0-es7
</code></pre>
<p>接着安装管理界面</p>
<pre><code class="language-shell">docker run -d --name skywalking-ui  --restart=always  -e TZ=Asia/Shanghai  -p 8088:8080  --link skywalking:skywalking  -e SW_OAP_ADDRESS=skywalking:12800  apache/skywalking-ui:6.6.0  --security.user.admin.password=admin
</code></pre>
<p>然后配置端口开放</p>
<figure data-type="image" tabindex="1"><img src="https://zblzbl1991.github.io/post-images/1629862052220.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://zblzbl1991.github.io/post/hello-gridea/</id>
        <link href="https://zblzbl1991.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>